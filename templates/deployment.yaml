{{- range $index, $dep := .Values.deployments }}
{{ $gc := deepCopy $.Values.global }}
{{- $dep := mergeOverwrite $gc $dep }}
{{- if not $dep.knative.enabled }}
{{ $models := $dep.models }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "d-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
  namespace: {{ include "tensorflow-serving.namespace" $ }}
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/instance: {{ include "tensorflow-serving.name" $ }}
    deploymentName: {{ $dep.name }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: tensorflow-serving
      deploymentName: {{ $dep.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tensorflow-serving
        deploymentName: {{ $dep.name }}
    spec:
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      initContainers:
      - name: model-downloader
        image: google/cloud-sdk:slim
        command:
        - /bin/sh
        - -c
        - |
          {{- $gsPath := "" }}
          {{- if $dep.modelStorage.gc.path }}
          {{- $gsPath = printf "%s/%s" $dep.modelStorage.gc.bucket $dep.modelStorage.gc.path }}
          {{- else }}
          {{- $gsPath = $dep.modelStorage.gc.bucket }}
          {{- end }}
          if [ -z "{{ $dep.modelStorage.gc.credentialsSecret }}" ]; then
            gsutil -m cp -r \
            {{- range $model := $models }}
            gs://{{ $gsPath }}/{{ $model }} \
            {{- end }}
            /models
          else
            gcloud auth activate-service-account --key-file=/secret/credentials.json
            gsutil -m cp -r \
            {{- range $model := $models }}
            gs://{{ $gsPath }}/{{ $model }} \
            {{- end }}
            /models
          fi
        volumeMounts:
        - name: model-volume
          mountPath: /models
        {{- if $dep.modelStorage.gc.credentialsSecret }}
        - name: secret-volume
          mountPath: /secret
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml $dep.resources | nindent 12 }}
      containers:
      - name: tensorflow-serving
        image: "{{ $dep.image.name }}:{{ $dep.image.tag }}"
        imagePullPolicy: {{ $dep.image.pullPolicy }}
        args:
        - --model_config_file=/config/model-config
        - --enable_profiler=false
        - --file_system_poll_wait_seconds=0
        - --grpc_max_threads=0
        env:
          {{- toYaml $.Values.global.env | nindent 12 }}
        ports:
        - containerPort: 8500
        resources:
          {{- toYaml $dep.resources | nindent 12 }}
        volumeMounts:
        - name: model-volume
          mountPath: /models
        - name: config-volume
          mountPath: /config
      volumes:
      - name: config-volume
        configMap:
          name: {{ printf "cm-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
      - name: model-volume
        emptyDir: {}
      {{- if $dep.modelStorage.gc.credentialsSecret }}
      - name: secret-volume
        secret:
          secretName: {{ $dep.modelStorage.gc.credentialsSecret }}
      {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "cm-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
  namespace: {{ include "tensorflow-serving.namespace" $ }}
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/instance: {{ include "tensorflow-serving.name" $ }}
    deploymentName: {{ $dep.name }}
data:
  model-config: |
    {{ include "tensorflow-serving.modelConfig" $dep.models | nindent 4 }}

{{- end }}
{{- end }}