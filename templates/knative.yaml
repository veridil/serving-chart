{{- range $index, $dep := .Values.deployments }}
{{ $gc := deepCopy $.Values.global }}
{{- $dep := mergeOverwrite $gc $dep }}
{{- if $dep.knative.enabled }}
{{ if $dep.hpa.enabled }}
{{- fail (printf "Error: HPA and Knative cannot be enabled simultaneously for the same deployment '%s'. Please disable one of them." $dep.name) }}
{{- end -}}
{{- $models := list }}
{{- if $dep.models }}
{{- $models = $dep.models }}
{{- else }}
{{- $models = list $dep.name }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "cm-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
  namespace: {{ include "tensorflow-serving.namespace" $ }}
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/instance: {{ include "tensorflow-serving.name" $ }}
    deploymentName: {{ $dep.name }}
data:
  model-config: |
    {{ include "tensorflow-serving.modelConfig" $models | nindent 4 }}

---
{{ $autoscalingClass := "hpa.autoscaling.knative.dev" }}
{{ if or (eq $dep.knative.autoscaling.metricType "concurrency") (eq $dep.knative.autoscaling.metricType "rps") }}
  {{ $autoscalingClass = "kpa.autoscaling.knative.dev" }}
{{- end }}
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: {{ printf "ks-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
  namespace: {{ include "tensorflow-serving.namespace" $ }}
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/instance: {{ include "tensorflow-serving.name" $ }}
    deploymentName: {{ $dep.name }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tensorflow-serving
        deploymentName: {{ $dep.name }}
      annotations:
        autoscaling.knative.dev/class: {{ $autoscalingClass }}
        autoscaling.knative.dev/metric: {{ $dep.knative.autoscaling.metricType }}
        autoscaling.knative.dev/target: {{ $dep.knative.autoscaling.target | quote }}
        autoscaling.knative.dev/min-scale: {{ $dep.knative.autoscaling.minScale | quote }}
        autoscaling.knative.dev/max-scale: {{ $dep.knative.autoscaling.maxScale | quote }}
        {{- if $dep.knative.autoscaling.targetUtilizationPercentage }}
        autoscaling.knative.dev/target-utilization-percentage: {{ $dep.knative.autoscaling.targetUtilizationPercentage | quote }}
        {{- end }}
        autoscaling.knative.dev/initial-scale: {{ $dep.knative.autoscaling.initialScale | quote }}
        autoscaling.knative.dev/scale-down-delay: {{ $dep.knative.autoscaling.scaleDownDelay | quote }}
        autoscaling.knative.dev/scale-to-zero-pod-retention-period: {{ $dep.knative.autoscaling.scaleToZeroGracePeriod | quote }}
        autoscaling.knative.dev/window: {{ $dep.knative.autoscaling.stableWindow | quote }}
    spec:
      containers:
      - name: tensorflow-serving
        image: "{{ $dep.image.name }}:{{ $dep.image.tag }}"
        args:
        - --model_config_file=/config/model-config
        - --enable_profiler=false
        env:
          {{- toYaml $.Values.global.env | nindent 10 }}
        ports:
        - containerPort: 8500
          name: h2c
        resources:
          {{- toYaml $dep.resources | nindent 10 }}
        volumeMounts:
        - name: model-volume
          mountPath: /models
        - name: config-volume
          mountPath: /config
      volumes:
      - name: config-volume
        configMap:
          name: {{ printf "cm-%s" (include "tensorflow-serving.sanitizeModelName" $dep.name) }}
      - name: model-volume
        emptyDir: {}
      {{- if $dep.modelStorage.gc.credentialsSecret }}
      - name: secret-volume
        secret:
          secretName: {{ $dep.modelStorage.gc.credentialsSecret }}
      {{- end }}
      initContainers:
      - name: model-downloader
        image: google/cloud-sdk:slim
        command:
        - /bin/sh
        - -c
        - |
          {{- $gsPath := "" }}
          {{- if $dep.modelStorage.gc.path }}
          {{- $gsPath = printf "%s/%s" $dep.modelStorage.gc.bucket $dep.modelStorage.gc.path }}
          {{- else }}
          {{- $gsPath = $dep.modelStorage.gc.bucket }}
          {{- end }}
          if [ -z "{{ $dep.modelStorage.gc.credentialsSecret }}" ]; then
            {{- range $model := $models }}
            gsutil cp -r gs://{{ $gsPath }}/{{ $model }} /models
            {{- end }}
          else
            gcloud auth activate-service-account --key-file=/secret/credentials.json
            {{- range $model := $models }}
            gsutil cp -r gs://{{ $gsPath }}/{{ $model }} /models
            {{- end }}
          fi
        volumeMounts:
        - name: model-volume
          mountPath: /models
        {{- if $dep.modelStorage.gc.credentialsSecret }}
        - name: secret-volume
          mountPath: /secret
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml $dep.resources | nindent 10 }}
{{- end }}
{{- end }}